02/20/08

What are the basics that are needed for leg simulation?  If I just want to check that box2d works:

-World
    -Handles overall simulation loop, wrapper around b2World
    *constructor creates world,
      * adds gravity
      * creates ground
    *Simulation step may just call world->step
      * my world maintains time step info?
        -will that ever be dynamic?
      *Also has to update muscle forces in leg

-Leg
    -Actual geometry of the legged creature
    -Displays geometry
    -In future I want to be able to specify geometry through data files,
     but thats easy enough to add.
    * For now lets just try our hand at creating a 1, 2 and then 3 segment leg
      and dropping it.
    -Also stores list of muscles
    -In future creature needs a brain which interacts with muscles

-Graphics wrapper?  Probably not necessary just yet, and if I keep it simple
  now then it won't be a problem later to change.
    -Just drawing lines with SDL (and perhaps SDL_gfx), nothing hard about that

-Muscles
    -Springs that connect fixed points
    -Variable length I think... or K, its unclear.. maybe both.

02/23/08

I probably do need a rendering engine to translate from Box2D coordinates to
screen coordinates.  You know, something like one pixel is a centimeter, and
origin is lower left or centerbottom, or whatever.

So I want to be able to specify the center of the screen in boxspace, and
number of pixels in a meter (basic unit in boxspace).  And flip the Y so
increaseing Y goes up. 

03/02/08

Implementing NEAT:  

The genome is the link structure, so the brain itself can implement crossover...  But actually, since we need to keep global track of innovation numbers per generation, so should create a mating pool method that will run experiments, keep population and create new population.  That makes sense.  I can think about generalizing it later if necessary.  Clearly its useless right now

Lets first implement the brains then, since that is fun.  I think I decided on method similar to ken's code, at the first step run it until some activation gets to all the nodes (especially output).  Otherwise pass current activations one step forward.  So the brain contains lists of neurons and links:

Neuron:
    -ID number
    -Sensor, Output or Hidden
    -Has received active input?
    -current input activation (sum of input links last activations)
    -previous steps full activation

Links:
    -ID and/or pointer to input and output neuron of the link
    -Weight
    -enabled?
    -Innovation number

So process of running a network:
    -Initialize sensor activation
    -If first iteration, then activate network
	-set input activation to 0, all hidden/output nodes inactive
	-Repeat until all nodes active:
	-Go over the links
	    -If link is enabled and input is active
		-Set output active, 
		-add weight*input last activation to output activation sum
	-Go over the nodes.
	    -If active, set last activation to sigmoid(activation sum)
    -Any other iteration:  Repeat once:
	-set input activation to 0
	-Go over the links
	    -If link is enabled
		-add weight*input last activation to output activation sum
	-Go over the nodes.
	    -set last activation to sigmoid(activation sum)


So pass in inputs per step as array of values (between 0 and 1), return outputs as array of values between 0 and 1.  Let the instantiating body interpret the rest, and return fitness value.

03/06/08

So it appears that about 3/4 of NEAT are hacks, which is all well and good, its whats necessary to make anything work.  I should probably impliment what I feel like and play with it, discuss with georgina, etc.  My goal is more code simplicity and speed than anything else.  The species idea is nice, along with inter species breeding.  I need to think about the node and innovation number scheme... I am guessing I am probably wrong about sequential nature of the neurons, which slightly complicates my code, but probably not greatly.

03/09/08

For full NEAT genetic algorithm, what do I need:

Species
    -One genome is the representative member used to identify who
     belongs in the species.
    -Stores set of genomes that all belong to one species
    -For each genome, keep a fitness value
	*May need to normalize fitness for species size
    -Need a method to randomly select one member by fitness


GeneticPool
    *Main class, stores the population, populates the next generation, etc.
    -Population: list of genomes
	*In this case genome is a list of network connections
	*May in fact not need single population list, but store by species
    -Species: list of sets of species
	*Each species stores a representative species
	*Then list of genomes of its members
    -Stores fitness function
	*impliments fitness class that is given a genome and returns fitness
	 value
    -Creates new generation
	*Calculate fitness values of entire population, species by species if
	 necessary.
	    *Report average/best fitness for this generation,
	    *Store overall champions genome
	*Calculate how many offspring each species will receive, remove dead
	 or whatever as necessary.
	*Go through each species
	    Champion stays on
	    For the number of offspring that species gets:
		Select one member from species weighted by fitness
		With some probability chose mother from same species
		 or another.
		Combine mother and father to form new genome
		Add genome to next generation
		    Find appropriate species, etc.
    -Store innovation numbers per generation(?)
    -Mate two genomes to form a new genome
	*Crossover of genes, etc etc
	*Mutation of weights, addition of nodes/links


09/17/08

Its been awhile since I have thought about this.  Huh, who knew that all my plans for summer would fail.  Lets see if I can make a little progress on this everyday now...

So what do I have, from a NEAT perspective:

Network and Neuron
    -A not especially fast implementation of network and neuron
	*not fast and not tested I should say
    -Takes in a genome (which is just an array of Links), and creates new
     network
    -a function run which takes in an array of input values and produces an 
     array of outputs

For just a simple genetic algorithm what do I need (ie no speciation, no structural mutation):
    -Population of genomes
    -Ability to plug in various fitness functions
    -Mate two genomes, produces a third genome
    -Run experiment one generation
	-Go over all members of population, find fitness of each
	    -As said above, do some book keeping:
	    *Report average/best fitness for this generation
	    *Store overall champions genome
	-Create new generation
	    -Champion stays on
	    -To fill rest of next generation:
		pick two genomes randomly, by fitness
		Mate them, add offspring to next generation
	

Now how general do I want to make this?  Lets start with not very.  

Well, ok, a little.  At least lets have a genome class and fitness function class.  That should be enough to implement a straight forward fairly generic genetic algorithm implementation.  Haven't thought much how speciation fits into this, but I think thats the easy part.  Innovation numbers is something else.

Genome:
    -Mate (const genome &parent) -> Genome offspring
    -Mutate ()
	*Need to set global experiment options somewhere.  Pass it around, or what?
    -Load/unload from file... possibly not as easy as java, but I bet I can figure a way...
    -Clone -> Genome clone
	*for passing on champion, etc.

Fitness Function:
    -Score (Genome *g) -> double score

09/20/08

I bet I can get genetic algorithm without speciation running real quick, if I define genomes and fitness function as above.

09/22/08

Mating.. need to figure that one out.  So we are given two lists of links and the goal is to form a new genome with the links of both parents, with one parents dominating if they line up... ohhh... interesting.

So assuming that innovation numbers are in sorted order we do a merging trick:

Go over both lists
    If one head innovation number less than other, pass that through to child
	increment that parent
    if tied:
	with some probability take from dominant parent (p1 of p1.mate(p2))
	otherwise average strength

There are some details about calculating number of neurons, and if the id's will stay consistent somehow... and if should copy around links or create new ones, etc.  Also need to find dominant parent when selecting them at the beginning.

10/18/08

Lets put some thought into structural mutation...

First type is adding a new links:
    -Randomly select two neurons, add a new link between them with some small
     weight.  
	*Creates one new link
	*need to check innovation to see if this has been added before, find
	 appropriate innovation number.

Second type is adding new node over existing link
    -Select one link randomly, must be enabled?
	*Disable this link
	*Check innovation, see if this link has been split so far
	    if so, find appropriate innov info (innov of pre/post, new neuron
	    number)
	*Create new neuron with new number of next neuron id
	*Create two new links, set weight of one to 1, and old weight to
	 the other.

So global info I need to keep track of (either overall, or each generation)
-Innovation tracking:
    -Add link innovation
	*Index by two neuronIDs that are being connected
	    -stores the innovation number for this link
    -Add node innovation
	*Index by innovation number of link being split
	    -stores the innovation number of two new links, new neuron ID
    -Next Innovation number
    -Next Neuron ID

So up to now the genetic algorithm is actually real generic.  Do I want to break that by including NEAT innovation?  It probably won't end up being super intwined... yeah, lets just do that now and if I ever need different genetic algorithm later I can pull this out.  Abstract away innovation and species for use with other genome definitions.

11/22/08

ToDo:

So I have an xor experiment running, but at the moment I don't actually know if its working.  Time to implement more debugging/inspection/experiment features.  This means:

-Write network to file
    *Must be human readable.
    *XML?
-For each generation also report mean size of a network, and size of best
 network
-Create experiment file, contains parameters to recreate an experiment
    *Network parameters
    *Genetic algorithm parameters
    *Name of files
    *Where to save files
    *again, XML?
-Save best network in each generation (if changes?)

boy, do I gain anything from xml, except perhaps experience playing with XML.  Lets do some quick searching for free XML parsing library.

03/06/09

Huh, been awhile.

Ok, lets try for speciation, I am betting once I get this architecture into my memory I can implement that easily.

Once I have NEAT reasonably working on xor test (not entirely sure what I am expecting, but an improvement of maximum fitness over 500 generations is one thing), the immediate plan is:
    -Debug (valgrind?)
    -Profile
	-Any spots where small scale parallelization is warranted, or just ignore it?
    -Read in parameters
    -save output in usable format
	-Both experimental output and network specifications
	*Screw XML for now, just do it in text, can change that later and
	 convert
    -Implement Pole balancing test?

Ahh, experimenting with xor I think I have found a parameter that seemed to be causing XOR to fail.  The probability of randomly resetting the weight seems to have done the trick, or rather it being too large.  I will need to do more rigerous experiments to verify that, but if I set it to 0.2 then can never really get above 75 (max 100), but if I set this prob to 0 then can get to 0.98.

04/01/09

I still don't have proper debugging output to inspect the actual structure of the NEAT solutions to xor, although I am reasonably confident that they are correct.  I should add an additional output that tests the classifier for a looser more correct xor test, setting some threshold and seeing if the binary values are correct... pretty sure a correct network will solve it in very few generations.

04/05/09

NEAT does solve xor reasonably quickly, and I bet I could do some parameter tuning to improve that further.  It would be easy to do this in a fairly general way if I do better command line parsing for experiment parameters:

I should load experiment parameters:
    -From command line (pass argv, argc to exp Parameters)
    -From a file (read file on command line, pass to expParameter)

I bet I can do one or both pretty nicely, but the question is if I care at the moment...

I want to do speciation first.  Lets summarize the speciation procedure, what is necessary to implement and how to implement:

Necessary procedures:
    -Compatability distance between two genomes:
	linear combination of number of excess genes, disjoint genes, and difference in weight of shared genes.
	*Not sure I agree with the difference of definition of excess and disjoint, so how about we just combine them to nonmatching genes, normalized by number of total genes (in larger genome) (in his experiments first two weights are equal, so they might as well be summed)

    -Given compatability threshold, find first species cluster where compatability between representative and genome is less than this threshold
	-If no species matches, form new species

    -Individual fitness now shared, so divide by size of the species it is in
    (thus large species naturally shrink)
    
    -Selecting for mating:
	Given some interspecies mating parameter p, with probability 1-p mate
	for a genome will come from its own species, otherwise from outside.
    
New parameters:
    -compatability distance weights, cG and cW (gene diff weight, weight difference weight) (suggested defaults, 1.0 and 0.4)
    -compatability threshold (suggested default, 3.0)
    -interspecies mating parameter p

New structures:
    -List of species
	*Each species has:
	 -a list of pointers to its members
	 -representative member (first member in list?)
	 -total fitness of members

** As I start to store multiple pointers to each genome, I should make it a shared_ptr (which is almost always the best procedure anyway).

07/19/09

I guess its my three month check in... Let us see what trivial accomplishment I can do today.

Speciation.. where should that go...

Compatability should be part of Genome implementation, so put that there (either static function taking in two genomes, or genome.compat(other)... 

Oooh, this would have been a subtle issue, but are the innovation numbers guaranteed to be ascending in the links list for the genome?  I think it depends on how I use the innovation store, but might as well sort them anyway to defeat this and not be too clever from the start. 

Now I'm going to need species, which is a simple structure, but what are necessary operators:

Generating next generation:
    Find fitness function of all population, 
	-Go by species of last generation, finding sum of that species
	 fitness

02/20/10

Lets impliment my own idea of speciation, because its pretty hacked together as it is, so whatever I come up with through experimentation will be fine.

The goal is to break the population into species based on compatability to some fixed member (first, or most fit... not sure).  Now when generating a new generation, with some probability match two members of one species, or else across species.  When doing one species, select the specie based on average fitness, other wise use the fitness of each individual divided by size of the species it is in.

Procedure:

-Find fitness for each individual in population
-I should probably store species per generation
    -For each species, put together average fitness, divide individuals by size
-Now when selecting new parents:
    -Each specie keeps its fittest individual
    -With prob p select species by average fitness
	select two parents from this species
    -Otherwise select two parents from overall population based on
	fitness/specie size
    *Generate new individual
    -With new individual check each specie and find the first that it is compatible with (the representative or most fit member)
	*Start with parent specie, thats probably most likely


02/22/10

So I have species reasonably working, or a basic implimentation of it, 
    -No adaptive thresholding
    -No culling of weak or empty species
    -etc etc, I am sure there are other improvements.

What I need to do before playing with these and other parameters is to get better logging built in, so I can track what is actually going on during any one run.  Something like: max fitness, mean fitness per generation, number of species
    -For each specie: max/min/mean fitness, #individuals, information about link structure?

Is there a better way of outputting this other than just tab delimited, one line per generation?  This is easiest to graph with say gnuplot...  Can I put together a simple logging class that will store the numbers and print them in a smart way, or give options for different style of printing?

Looks like I do need to kill species, a couple of them get to be only 1 member at some point.

02/23/10

Improvements:
    -Kill stagnating species
	-Let young species survive
    -Cull weak individuals from each species?
    -Copy over pole balancing experiments, start to play with graphics and saving networks for replay, etc.

Deleting species/individuals from species
    -Do I need to remove from overall population?
	-is it enough to set fitness to 0 and remove from total fitness?
	    *This should ensure it doesn't propogate


03/06/10

Can I make hopper learning program?  Really shouldn't be too hard, can just connect pieces from various programs I have now.  Organization ideas:

-Include fitness function inside creature definition?
    -I think not, so that means I need to pass the network inputs/outputs
     to the creature class to simulate a step...

-Ideally I would have the creature class take in config file of its construction, but for now lets hard code it.  

-Need to figure out how to reset its position...

what will inputs and outputs be:

output:
-thigh muscle
    length, strength
-shin muscle
    length, strength

So 4 outputs

input:
-bias
-knee angle
-hip angle
-head height
-foot height
-back angle to ground?

Not sure how to normalize heights, but I guess put a cap above which can't estimate.  Either that or use some exponential squashing function, actually thats not a bad idea.

So only 6 inputs for hopper?  I would also like to know the amount of force on the body parts, but not sure if that is easily attainable.

Ok, how to reset positions...

Thinking about generalizing creature, I need a way to store named body parts, so how about a map of string -> body 

Ok, now when I define a creature, I need to specify the construction or parts, and an initial position that will be instigated in reset method (which will also set initial velocity of all parts to 0).

08/28/10

So where did I leave off...  I copied pole balance code into a hopper class, with the plan of integrating hopping creature into hopper genome evaluation function.  

So what I need to do for simulation is:

-Create network (done)
-Reset creature (done)
-Simulation loop
    -Get inputs of creature
	*For now, hard code retrieval from body parts
    -Run through network
    -Set outputs of creature
	*Put values into muscles
    -Update creature
    -Display if whatevs.
    -Check for failure, add to score
	*Get head height, if below some threshold stop, otherwise add square to score.


Wow, thats not too bad, I think I can hard code much of this today.  THen I will need to think about generalizing this.

Ok, should be easy to get knee and hip angle from those joints (instead of list, lets use name map to pull actual named joints), after double check that possible to get angle from joint in Box2D.

So how should I get foot and head height?  These are shapes attached to bodies.
I can directly ask for the bodies position, but this will give back+head center
of mass, or shin+foot center of mass.  When I create the head shape I set the
body coordinate center, so I can recover the head position with two pieces of
information: head relative position, body part it is attached to.  Then I can
get world point from that local point and done?  So for specific body parts of
interest I specify the name of the part (head), body it is attached (back), and
its relative position (0,3)...   Turns out I had a seperate method coded up on my laptop that used the body pointer in the shape itself, which also works and I will think about that... may make more sense.

08/29/10

ToDo:
-Modify graphics to give horizontal distance and scrolling as the creature moves.
-Use previously coded shape storage method.  Is it cleaner?
-Look at XML again, is it necessary?  Find examples in other code, what libraries methods are used, what would XML format look like.

Where to put graphics for marking distance... probably in boxScreen since it translates from world coordinates to screen coordinates.  I need to tell it the new location of the part to keep viewable (say head for now), and it will shift the origin accordingly.  After that I can add a helper function that draws grid, everything else drawn on top of that.

I was getting an error with speciation that I haven't tracked down yet, but I believe it comes from cases where we have 1 member per specie, which seems to make things quite unhappy quickly.  By playing with speciation threshold I was able to keep it from rearing its head, but I should probably try to figure out a real fix.

02/19/11

Looking at a couple of methods for reading in parameters from configuration file, and boy, sure appears to be a pain in the ass. 

For global parameters, my options are basically:
    -Big if statement
    -parameters in a map, so do look up for each reference
     (or parameter pointer in map, which requires ridiculous boilerplate)

Also question of coupling, do I want to pass a file, property tree, or just a map to the global parameter object.  I think map would be fine, and then just fill variables and report if shit goes wrong.  This is the easiest and ugliest method.  Not even a map, array of key, value pairs is enough, just need to iterate over it.  But in that case, going to face issues with different types.  Boy, C++ is a pain, isn't it.

Yeah, I was trying to think too hard instead of just get something working.  Lets pass around file name, then can load it with libconfig or whatever to read.

02/23/11

Moving to 2 legs, I see that I have to change code for how the brain wires to the leg.  Is there anyway I can encode this easily in the config file?

I also neglected the default positioning, so I believe thats giving me some issues when I naively just changed the config.  OK, this is a bit more work than I was hoping, but pointing out how I should change things.

I believe I know the error.  Must have to do with when I prune species or stagnant members from species, I bet I leave some empty species around, or else 0 fitness.

hopper: Dynamics/b2World.cpp:676: void b2World::SolveTOI(const b2TimeStep&): Assertion `subStep.dt > 1.19209290e-7F' failed.

Now this, not sure where this is coming from.

02/24/11

ToDo:
-Track down Dynamics bug
-Crashes on exit.  Some memory bug, trying to free something twice, who knows...
    -Looks like its a problem with destroying bodies, maybe question of order with destroying world?

-Port to Box2d 2.1
-Fix speciation error at beginning, why do all but 1 species die in 5th round
-Allow specification of sensors and actuators in config file, so can move from
 one to two legs.
-More sensors (foot force, etc), and consider sensors already there (how to scale to 0-1)
-Play with genetic algorithm parameters, adaptive species distance, preserving best (without mutation), culling weak, etc etc.
-Symmetric inputs/outputs, can we exploit that structure (check literature, I am sure someone has tried this, other than ridiculous hyperneat).
-Convert creature creation to factory style, pass world a config file, it returns shared pointer.
-Display more information regarding muscles, forces
    *Options for different colored limbs?
-Save best network from each generation, be able to read in and replay networks
-Add display window and world configuration
-Parallelize
    *This mostly means evaluating each generation, but still, do that.

*Profile:
    *Appears that all the time is being taken in physics, as expected.  Not too much I can do other than simplify geometry:

hopper.gprof:
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 26.75     22.29    22.29                             b2RevoluteJoint::SolveVelocityConstraints(b2TimeStep const&)
 23.78     42.10    19.81                             b2ContactSolver::SolveVelocityConstraints()
  5.53     46.71     4.61                             b2RevoluteJoint::SolvePositionConstraints()
  4.51     50.47     3.76    10000     0.38     0.67  hopper::operator()(boost::shared_ptr<Genome> const&, int, SDL_Surface*)
  4.09     53.87     3.41                             b2CircleShape::ComputeSweptAABB(b2AABB*, b2XForm const&, b2XForm const&) const
  3.30     56.62     2.75                             DistancePC(b2Vec2*, b2Vec2*, b2PolygonShape const*, b2XForm const&, b2CircleShape const*, b2XForm const&)
  2.99     59.11     2.49                             b2ContactSolver::SolvePositionConstraints(float)

So unless I were to break into Box, not much I can do from my end.

I think for the memory issues, the problem is I should have the world create bodies, factory style...

02/26/11

Fixing speciation problem at the beginning.  The problem is, when I start out each member becomes its own species, just by chance (and the fact of the compatability threshold).  After 5 generations or whatever the old age is, I remove all but one of the species (the best, I believe... or else the first, just accidentally lets say), and then search actually starts.  The real cause then is that at 5 generations, we still have 100 1 member species.  What causes this is that each generation I automatically cause the champion of each species to survive, and when they are all size 1, well, this fills it up. So some ideas to counter this:

1. Start with fewer than desired population.  At first mating they will fill up total population size according to initial allocation of fitness.  Hopefully there will be species with more than 1 member at this point.  This is easy to impliment, and fairly automatic.  An issue is that its initial random distribution will cover less of the possible search space than the full population might.  Finding the best 20 of 100 starting points is probably better than just finding 20 random starting points.  Well, its hard to say.

2. Only pass on champion for those species in top X percent if fitness, or possibly whose fitness is within X percent of max fitness... Now loser species will continue to propogate only through chance, while the best will have their champion sticking around...

02/28/11

If I make the world a creature factory, ie add createCreature(config) to World, I probably don't need to expose createBody or createJoint, except to Creature.  This means friend, right?

03/04/11

Ok, whats next on the ToDo that seems doable.

-Adaptable species threshold to try to create a fixed number of species.
    *Add desired # species and threshold change size
    *After populating new species, if more than desired, decrease threshold,
     less than desired, increase, or vice versa.
-Play with relative sizes, may have to adapt drawing function to scale physical to pixel space.

-This weekend, add ability to encode sensors into configuration, and set # of output according to number of muscles.  Goal will be to be able to add feet to walker, and try out alternate walking configurations (squirrel)

-Need to make background movement more obvious, 2 ideas
    *Give ground some texture (diagnal lines, marks at 10 m, whatever)
    *Mario clouds, or some other paralax background
*Can integrate the above with modification of sizing (zooming?) and potentially Box2d 2.1 upgrade.

03/05/11

Sensors... this is an interesting one.  Its rather easy to specify in the config file, just need to figure out how to encode them...  Break them into different types, so lets think about joint angle first.

Joint Angle Sensor:
-pointer to joint (or name of joint)
-returns the limit_norm( joint.angle, lower limit, upper limit)

so I view this as working like this:

Sensor network, 
    -stores vector of individual sensors
    -also name and part type for each individual sensor
    -Able to read in Sensor config file

Before simulation initialize sensor network with Creature
    -Go through sensor vector and for each sensor, give proper joint/shapePos/body pointer

During simulation, initialize in[] array with values from each sensor

Alternatively I can put the sensor network into the creature, that way the target is set once, and if I create multiple creatures they will have their own sensors...  That does make more sense.

03/14/11

Here's a good ol' todo for legs: add ability to parallel process.  Actually, dual goals with one starting change.  What I want to do is when I display current results I want to show the top creature in each specie in parallel, so say 4x4 boxes each with little walker.  This requires a seperate World and Creature for each box (or thread).  Is there any sort of notion of deep World copy...

One good step in this, seperate out find fitness for current population so can pull true best member each generation (before any mutation during copying?). 

    -Get fitness
    -Find best individual in each species
    -Display if doing that
    -Now next generation

Then I need to form a way to create new world/creature threads.  I can do this with config file, but that seems inelegant.  What may need to do is parse file once into some internal format, and then recreate world (or just load once statically, store 15x in array...)

As it is now, I pass in world and creature when I create the hopper fitness function.  Perhaps it will make sense to pass in genome and world/creature pair (environment of some sort perhaps).  

03/16/11

Ok, trying to track down why the best score doesn't stay constant, if we keep the same networks, and it appears the best network does stay constant (at least with the score changing).  This means I am initializing the network incorrectly (always possible), or the simulation isn't deterministic.  Lets see if rand appears anywhere in Box code.

Ah, muscles have state.  Does that change it.  Nope...

Ok, doing testMult, I have figured out that if I recreate a world and creature each time, I get same results, so there is some state I am not resetting... lets track it down.

It looks like I am going to have to recreate (and destroy) the world every time I run objective function.  This really shouldn't slow things down too much in comparison to the actual simulation, but need to keep it in mind.  Also a good question is what format to store the configuration information?  maybe libconfig setting format is good enough.  For now, lets assume it is unless otherwise proven it takes too much time or memory (it better not be reprocessing the file everytime).


